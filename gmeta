#!/usr/bin/env python3
import os
import sys
import json
import subprocess
from string import Formatter
from datetime import datetime as dt

__update__ = dt.now()
__version__ = 0.1
__contact__ = "github:jjmcnelis"
__doc__ = '''
    #
    #   {}
    #   {}
    #   {}
    #
    #  gmeta -- bash shortcuts to handy data utils
    #
    #  A bunch of shortcuts (wrapped with Python 3) to key 
    #  functionality of geospatial and tabular data wrangling utils:
    #   a. GDAL/OGR, b. NCO, c. XSV, d. Fiona + Rasterio
    # 
    #  All tools are accessed using ordered lists of arguments that 
    #  drill down to some system call. The last two arguments are 
    #  special --
    #
    #     1. an OPTIONAL keyword argument with a plain text input 
    #        passed like: "KEYWORD=TEXT"
    #     2. the name ( OR absolute path ) of the INPUT DATA FILE
    #
    #  The input file is always the last argument. The optional keyword
    #  argument is second to last; e.g this returns the names of ALL 
    #  variables that match regex: '.*KEYWORD.*' --
    #
    #     $ gmeta find var=[KEYWORD] [FILE]
    #
    #  'find var' is available for formats that have fields/columns/
    #  variables/etc (tables, multidims, vectors). 
    #
    #  HELP
    #   USE
    #    TABLE: any tabular data in a text file
    #    MULTID: hdf4/5 + netCDF
    #    RASTER: tif, hdf, img, grd, envi, netcdf, etc (GDAL support)
    #    VECTOR: shp, dbf, wkt, kml, kmz, geojson, etc (OGR support)
    #
    #    Info:
    #     $  gmeta info [TABLE|MULTID|RASTER|VECTOR]
    #
    #    Find:
    #     $  gmeta find var=[REGEX/SUBSTRING] [TABLE|MULTID|VECTOR]
    #
    #    List:
    #     $  gmeta list vars [TABLE|MULTID|VECTOR]
    #     $  gmeta list grps [MULTID]
    #     $  gmeta list dims [MULTID]
    #
    #
'''.format( __update__, __version__, __contact__ )


def _exit_error(message: str, doc: bool=True):
    message_ = "ERROR: {} Exiting.\n".format(message)
    if doc: message_ = "HELP\n{}{}".format(__doc__, message_)
    sys.exit(print(message_))


def _get_frmt(file: str):
    if os.path.splitext(file)[1][1:] in __config__['formats']['tabl']:
        return 'tabl'
    if os.path.splitext(file)[1][1:] in __config__['formats']['rast']:
        return 'rast'
    if os.path.splitext(file)[1][1:] in __config__['formats']['vect']:
        return 'vect'
    if os.path.splitext(file)[1][1:] in __config__['formats']['mdim']:
        return 'mdim'
    else:
        return None


def _sys_call(cmd, dcode: bool=False, strp: bool=False, js: bool=False):
    # Call the utility in shell or list mode.
    kw = {'shell':True,'stderr':subprocess.STDOUT} if type(cmd) is str else {}
    sys_output = subprocess.check_output(cmd, **kw)
    # If dcode flag, decode as utf-8.
    if dcode: sys_output = sys_output.decode('utf-8')  
    # If the strp flag, strip newlines and tabs.
    if strp: sys_output = ",".join(sys_output.split()).replace("\n","")
    # If the js flag, load as string.
    if js: sys_output = json.loads(sys_output)
    # Return the formatted result!
    return sys_output


__config__ = {
    # Various outputs from gdal-config.
    'gdal-config': {
        # The GDAL version.
        'version': _sys_call('gdal-config --version'),
        # The list of supported extensions.
        'formats': str(_sys_call('gdal-config --formats')).split(" "),
        # The shared data directory.
        'datadir': _sys_call('gdal-config --datadir'),
        # The list of built and configured libs.
        'libsdir': str(_sys_call('gdal-config --libs')).split(" "),
        # Dependencies.
        'dep-libs': str(_sys_call('gdal-config --dep-libs')).split(" "),
    },
    # Maps supported extensions to: [ 'tabl', 'rast', 'vect', 'mdim' ]
    'formats': {
        'tabl': ['txt', 'csv', 'tsv', 'dat'],
        'rast': ['gtiff', 'tif', 'grd', 'img'],
        'vect': ['shp', 'kml', 'kmz', 'geojson', 'json', 'dbf'],
        'mdim': ['hdf4', 'hdf5', 'h5', 'nc', 'nc4', 'dods'],
    }
}


__cmd__ = {
    ## TABULAR DATASETS
    'tabl': {
        'info': '''xsv stats {file} | python3 -c "import sys, json, pandas; print(pandas.read_csv(sys.stdin).to_json(orient='records'))" ''',
        'count': '''xsv count {file} ''',
        'find': '''xsv headers {file} -j | grep -o '.*{var}.*' ''',
        'list_col': '''xsv headers {file} -j ''',
    },
    ## MULTIDIMENSIONAL DATASETS
    'mdim': {
        'info': '''gdalmdiminfo {file} -nopretty ''',
        'count_rec': '''ncks --trd -M {file} | grep -E -i "Root record dimension 0:" | cut -f 8- -d ' ' | cut -f 2- -d '=' ''',
        'count_dim': '''ncks --jsn -M {file} | python3 -c "import sys, json; print(len(json.load(sys.stdin)['dimensions'])) " ''',
        'count_var': '''ncks --jsn -M {file} | python3 -c "import sys, json; print(len(json.load(sys.stdin)['variables'])) " ''',
        'count_att': '''ncks --jsn -M {file} | python3 -c "import sys, json; print(len(json.load(sys.stdin)['attributes'])) " ''',
        'list_dim': '''ncks --jsn -M {file} | python3 -c "import sys, json; print(','.join(list(json.load(sys.stdin)['dimensions'].keys()))) " ''',
        'list_var': '''ncks --jsn -M {file} | python3 -c "import sys, json; print(','.join(list(json.load(sys.stdin)['variables'].keys()))) " ''',
        'list_att': '''ncks --jsn -M {file} | python3 -c "import sys, json; print(','.join(list(json.load(sys.stdin)['attributes'].keys()))) " ''',
        'list_grp': '''ncks -m {file} | grep 'group:' | cut -d ':' -f 2 | cut -d ' ' -f 2 | sort ''',
        'find': '''ncks --trd -m {file} | grep -e ': type' | cut -f 1 -d ' ' | sed 's/://' | sort | grep -o '.*{var}.*' ''',
        #'time': '''ncks -v time --jsn --dt_fmt=2 {file} ''',
        #'data': '''ncks -s "%f\n" -H -C -v {var} {file} ''',
    },
    ## VECTOR DATASETS
    'vect': {
        'info': '''fio info {file} ''',
        #'info': '''ogrinfo {file} -ro -al -so ''',
        'count': '''fio info --count {file} ''',
        'list_fld': '''fio info {file} --indent 2 | python3 -c "import sys, json; print(','.join(list(json.load(sys.stdin)['schema']['properties'].keys())))" ''',
        'lyr': {
            'info': '''fio info --layer={lyr} {file} ''',
        },
    },
    ## RASTER DATASETS
    'rast': {
        #'info': '''rio info -v {file} ''',
        'info': '''gdalinfo -proj4 -json {file} ''',
        #'count': '''rio info {file} | python3 -c "import sys, json; print(json.load(sys.stdin)['count'])" ''',
        'count': '''gdalinfo -proj4 -json {file} | python3 -c "import sys, json; print(len(json.load(sys.stdin)['bands']))" '''
    },

}


class YaBoyFormatter(Formatter):
    '''
    ```python
    >>> string = "{number_of_sheep} sheep {has} run away"
    >>> other_dict = {'number_of_sheep' : 1}
    >>> fmt = YaBoyFormatter()
    >>> _sys_call(fmt.format(string, **other_dict)
    1 sheep has run away
    ```
    '''
    def get_value(self, key, args, kwds):
        if isinstance(key, str):
            try:
                return kwds[key]
            except KeyError:
                return key
        else:
            return Formatter.get_value(key, args, kwds)


fmt = YaBoyFormatter()


__lookup__ = {
    ## PRINT COMPLETE METADATA (as json)
    "info": {
        "tabl": lambda a: {'cmd': fmt.format(__cmd__['tabl']['info'], **a), 'dcode': True, 'js': True},
        "mdim": lambda a: {'cmd': fmt.format(__cmd__['mdim']['info'], **a), 'js': True},
        "rast": lambda a: {'cmd': fmt.format(__cmd__['rast']['info'], **a), 'dcode': True, 'js': True},
        "vect": lambda a: {'cmd': fmt.format(__cmd__['vect']['info'], **a), 'js': True},
        "lyr": {
            'vect': lambda a: {'cmd': fmt.format( __cmd__['vect']['lyr']['info'], **a), 'js': True},
        },
    },
    ## COUNT THE NUMBER OF OCCURRENCES OF A DATA CONSTRUCT
    "count": {
        "tabl": lambda a: {'cmd': fmt.format(__cmd__['tabl']['count'], **a), 'dcode': True,},
        "mdim": lambda a: {'cmd': fmt.format(__cmd__['mdim']['count_rec'], **a), 'dcode': True, 'strp': True},
        "vect": lambda a: {'cmd': fmt.format(__cmd__['vect']['count'], **a), 'dcode': True, 'strp': True},
        "rast": lambda a: {'cmd': fmt.format(__cmd__['rast']['count'], **a), 'dcode': True},
        "dim": {
            "mdim": lambda a: {'cmd': fmt.format(__cmd__['mdim']['count_dim'], **a), 'dcode':True, 'strp': True},
        },
        "var": {
            "mdim": lambda a: {'cmd': fmt.format(__cmd__['mdim']['count_var'], **a), 'dcode': True, 'strp': True},
        },
    },
    ## FIND THE NAMES OF DATA CONSTRUCTS
    "find": {
        "var": {
            "tabl": lambda a: {'cmd': fmt.format( __cmd__['tabl']['find'], **a), 'dcode': True, 'strp': True}, 
            "mdim": lambda a: {'cmd': fmt.format( __cmd__['mdim']['find'], **a), 'dcode': True, 'strp': True},
        },
    },
    ## LIST THE NAMES OF DATA CONSTRUCTS
    "list": {
        "grp": {
            "mdim": lambda a: {'cmd': fmt.format( __cmd__['mdim']['list_grp'], **a), 'dcode': True, 'strp': True},
        },
        "dim": {
            "mdim": lambda a: {'cmd': fmt.format( __cmd__['mdim']['list_dim'], **a), 'dcode': True, 'strp': True},
        },
        "var": {
            "tabl": lambda a: {'cmd': fmt.format( __cmd__['tabl']['list_col'], **a), 'dcode': True, 'strp': True}, 
            "mdim": lambda a: {'cmd': fmt.format( __cmd__['mdim']['list_var'], **a), 'dcode': True, 'strp': True},
            "vect": lambda a: {'cmd': fmt.format( __cmd__['vect']['list_fld'], **a), 'dcode': True, 'strp': True},
        },
        "att": {
            "mdim": lambda a: {'cmd': fmt.format( __cmd__['mdim']['list_att'], **a), 'dcode': True, 'strp': True},
        },
    },
    ## DATA PRINTING
    # "data": {
    #     "var": {
    #         "mdim": lambda a: {'cmd': fmt.format(__cmd__['mdim']['data'], **a), 'dcode': True, 'strp': True},
    #     },
    # },
}


def _handle_args():
    
    # First argument (command) and last argument (file) are important.
    try:
        in_command, in_file = sys.argv[1], sys.argv[-1]
    except:
        _exit_error("a minimum of two arguments required.")
        
    # Get a list of valid commands.
    cmds = list(__lookup__.keys())
        
    # If the first argument is in the commands list, proceed.
    if in_command not in cmds:
        print("VALID COMMANDS: {}".format(cmds))
        _exit_error("arg1 is not a valid cmd input: {}".format(in_command))
    
    # If the second argument is a valid file path, proceed.
    if not os.path.isfile(in_file):
        _exit_error("input file path is invalid: {}".format(in_file))
    
    # Get the file type/format (extension based).
    in_frmt = _get_frmt(in_file)
        
    # If the first argument is a supportted format, proceed.
    if in_frmt is None:
        _exit_error("input file is not supported.".format(in_file))

    # Select the lambda function by the args.
    kwrg = {'file': in_file}
        
    # Try to look up system call.
    try:
        
        # Get the function lookup dictionary.
        func = __lookup__[in_command]
        
        # Loop over the parameters/arguments.
        for a in sys.argv[2:-1]:
            
            # If there's equal sign in argument, must be keyword (last).
            if '=' in a:
                # Split by the equal sign and replace keyword arg.
                param, value = a.split("=")
                # Set to dict.
                kwrg[param.lower()] = value
                # Update the selection.
                func = func[param]
            
            else:
                # Update the selection.
                func = func[a]
        
    except Exception as e:
        #raise(e)
        _exit_error("args did not yield a function via __lookup__.")

    # Return the populated call string in a dict with args for system call.
    return func[in_frmt](kwrg)



if __name__ == "__main__":

    # Handle input arguments.
    ARGS = _handle_args()
    print("\n# INPUT: ---------> \n\n{}\n".format(ARGS['cmd']))
    
    # Call one of two ways (based on keyword or no keyword).
    RESULT = _sys_call(**ARGS)

    # Print some debug info and the result.
    if type(RESULT) in [dict, list]:
        RESULT = json.dumps(RESULT, indent=2)
    print("\n# RESULT: ---------> \n\n{}\n".format(RESULT))

    